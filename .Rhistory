# Triplots of the parsimonious RDA (scaling=1)
# Scaling 1
plot(optm, scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
# Triplots of the parsimonious RDA (scaling=2)
# Scaling 2
plot(optm, scaling="species", main="Species scaling (scaling=2)")
plot(optm, col=c(1,2,3),scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
?plot.rda
?plot.cca
?plot.rda
plot(optm, col=c(1,2,3),scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
plot(optm,scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
plot(optm, col=c(1,2,3),scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
plot(optm,scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
x =0
y =0
plot(x,y, type = "n", xlim = c(-100,100), ylim = c(-100,100), frame.plot = FALSE, xaxt = "n", yaxt= "n", ann = FALSE)
par(mar = c(5,7,5,4))
abline(h=0, v=0)
text(x=-50, y=50, labels = "Regression", col = 1, cex = 1.3)
text(x=50, y=50, labels = "Classification", col = 2, cex = 1.3)
text(x=-50, y=-50, labels = "Ordination", col = 3, cex = 1.3)
text(x=50, y=-50, labels = "Clustering", col = 4, cex = 1.3)
#title(main = "Types of Multivariate Analysis")
mtext("Discrete", side = 4, line = 0.3, at=0, las = 1)
mtext("Latent Variable", side = 1, line = 0.3, at = 0)
mtext("Continuous", side = 2, line = 0.3, at = 0, las = 1)
mtext("Response Variable", side = 3, line = 0.3, at = 0)
library(knitr)
my_tbl <- data.frame(Att=c("Attribute 1","Attribute 2", "Attribute 3", "Attribute 4", "Attribute 5", "Attribute 6",  "Attribute 7", "Attribute 8", "Attribute 9","Attribute 10"), Obj1=c(1,0,0,1,1,0,0,0,1,1),
Obj2=c(0,1,0,1,1,0,1,0,1,0))
my_tbl$sim=c("no","no",rep(("yes"),4), "no", rep(("yes"),2), "no")
knitr::kable(my_tbl, digits = 3, row.names = FALSE, caption = "List of shared attributes for two things",col.names = c("Attribute","Object 1","Object 2","Similar"),  format="html",table.attr = "style='width:65%;'", align="c", escape = FALSE)
library(kableExtra)
dt<-data.frame(stringsAsFactors=TRUE,
c("Object 1", "Object 2"),
c("Present", "Absent"),
c("a", "c"),
c("b", "d"))
colnames(x = dt) <-c("", "", "Present", "Absent")
xt=kable(dt, caption= "Summary of shared and absent attributes",format="html",table.attr = "style='width:90%;'", align="c")
xt=kable_styling(xt,bootstrap_options = "bordered",
full_width = FALSE, position="l")
xt=add_header_above(xt,c("", "", "Object 1", "Object 2"),
bold = FALSE)
column_spec(xt,column = 1:2, bold = TRUE)
#manually enter data
lkerie=c(rep(1, 19), rep(0,5))
lkontario=c(rep(1, 18),0,1,rep(0,4))
sp=1:24
lksp=data.frame(species=sp, erie=as.factor(lkerie), ontario=as.factor(lkontario))
lksp$erie=ordered(lksp$erie, c("1", "0"))
lksp$ontario=ordered(lksp$ontario, c("1", "0"))
knitr::kable(lksp, caption="Species presence and absence in lake Erie and lake Ontario (data from from Watson & Carpenter 1974)",  table.attr = "style='width:60%;'", align="c", padding=0)
tlake=table(lksp[,c("erie","ontario")])
tlake
a=tlake[1,1]
b=tlake[1,2]
c=tlake[2,1]
d=tlake[2,2]
S_j=a/(a+b+c)
S_j
S_s=2*a/(2*a+b+c)
S_s
x=c(19, 35)
y=c(30, 10)
plot(x,y, xlim = c(0,40), ylim = c(0,40), xlab = "Species 1", ylab = "Species 2",frame.plot = FALSE, box(bty="l"), pch = 19, col = 3, cex = 2, font.lab = 2, cex.lab = 1.5)
text(x=19, y=35, labels = "sample j")
text(x=35, y=5, labels = "sample k")
text(x=17, y=20, labels = "b", col=4)
text(x=25, y=5, labels = "a", col=4)
text(x=28, y=23, labels = "c", col=4)
lines(x,y, lwd = 3, col = 3)
lines(c(19,19), c(29,10), lty = "dotted", lwd = 2)
lines(c(19,34), c(10,10), lty = "dotted", lwd = 2)
library(knitr)
nm=c("Species 1","Species 2", "Species 3", "Species 4", "Species 5", "Species 6",  "Species 7", "Species 8", "Species 9","Species 10")
j=c(19,35,0,35,10,0,0,0,30,2)
k=c(35,10,0,5,50,0,3,0,10,0)
eu <- data.frame(Att=nm, j=c(19,35,0,35,10,0,0,0,30,2), k=c(35,10,0,5,50,0,3,0,10,0), stringsAsFactors = FALSE)
eu$X2=(eu$j-eu$k)^2
sj=sum(eu$j)
sk=sum(eu$k)
sS=sum(eu$X2)
eu[11,1]="TOTAL"
eu[11,2:4]=c( sj,sk, sS)
knitr::kable(eu, digits = 3, row.names = FALSE, caption = "Species abundance and distance calculations for two samples",col.names = c("","sample j","sample k","$(X_j-X_k)^2$" ),  format="html",table.attr = "style='width:65%;'", align="c")
nm=c("species 1","species 2", "species 3")
meu <- data.frame(Att=nm, A=c(0,1,1), B=c(1,0,0),C=c(0,4,8), stringsAsFactors = FALSE)
knitr::kable(meu, digits = 3, row.names = FALSE, caption = "Species abundance",col.names = c("","sample A","sample B","sample C" ),  format="html",table.attr = "style='width:65%;'", align="c")
spmatrix=meu[2:4]
dist(t(spmatrix), method="euclidean", diag=TRUE)
library(plotrix)
plot(rbind(c(-3,9), c(-2,10), c(-2,7), c(1,9), c(2,10), c(2,7), c(-3,1), c(-2,2), c(-2,-1), c(1,1), c(2,2), c(2,-1), c(-3,-7), c(-2,-6), c(-2,-9), c(1,-7), c(2,-6), c(2,-9)), xlim = c(-8,7), ylim = c(-10, 13), xaxt = "n", yaxt = "n", frame.plot = FALSE, ann = FALSE, pch = 16)
draw.ellipse(-2.4,8.5,1.8,3.)
draw.ellipse(1.6,8.5,1.8,3.)
draw.ellipse(-2.4,0.5,1.8,3.)
draw.ellipse(1.6,0.5,1.8,3.)
draw.ellipse(-2.4,-7.5,1.8,3.)
draw.ellipse(1.6,-7.5,1.8,3.)
lines(c(-2,1), c(10,9), lwd=1.5)
lines(c(-3,2), c(1,-1), lwd=1.5)
lines(c(-3,1), c(-7,-7), lwd=1.5)
lines(c(-3,2), c(-7,-6), lwd=1.5)
lines(c(-3,2), c(-7,-9), lwd=1.5)
lines(c(-2,1), c(-6,-7), lwd=1.5)
lines(c(-2,2), c(-6,-6), lwd=1.5)
lines(c(-2,2), c(-6,-9), lwd=1.5)
lines(c(-2,1), c(-9,-7), lwd=1.5)
lines(c(-2,2), c(-9,-6), lwd=1.5)
lines(c(-2,2), c(-9,-9), lwd=1.5)
text(x=-2.5, y=12.7, labels = "Simple Linkage", cex=1.5)
text(x=-2.5, y=4.6, labels = "Complete Linkage", cex=1.5)
text(x=-2.5, y=-3.7, labels = "Average Linkage", cex=1.5)
cls=data.frame(a=c(5,6,34,1,12),b=c(10,5,2,3,4),  c=c(10,59,32,3,40), d=c(2,63,10,29,45), e=c(44,35,40,12,20))
clsd=dist(t(cls), method="euclidean")
round(clsd,0)
plot(rbind(c(0,0)), xlim = c(-50,50), ylim = c(-100, 100), frame.plot = FALSE, ann = FALSE, type = "n", xaxt = "n", yaxt = "n")
text(x=-40, y=75, labels = "a")
text(x=-20, y=75, labels = "b")
text(x=0, y=75, labels = "c")
text(x=20, y=75, labels = "d")
text(x=40, y=75, labels = "e")
text(x=-40, y=5, labels = "a")
text(x=-20, y=5, labels = "b")
text(x=0, y=5, labels = "c")
text(x=20, y=5, labels = "d")
text(x=40, y=5, labels = "e")
text(x=-40, y=-105, labels = "a")
text(x=-20, y=-105, labels = "b")
text(x=0, y=-105, labels = "c")
text(x=20, y=-105, labels = "d")
text(x=40, y=-105, labels = "e")
lines(c(-40,-40), c(85,100), lwd=2)
lines(c(-40,-20), c(100,100), lwd=2)
lines(c(-20,-20), c(100,85), lwd=2)
text(x=-30, y=90, labels = "33")
lines(c(-40,-40), c(15,30), lwd=2)
lines(c(-40,-20), c(30,30), lwd=2)
lines(c(-20,-20), c(30,15), lwd=2)
text(x=-30, y=20, labels = "33")
lines(c(0,0), c(15,55), lwd=2)
lines(c(0,20), c(55,55), lwd=2)
lines(c(20,20), c(55,15), lwd=2)
text(x=10, y=45, labels = "36")
lines(c(-40,-40), c(-90,-75), lwd=2)
lines(c(-40,-20), c(-75,-75), lwd=2)
lines(c(-20,-20), c(-75,-90), lwd=2)
text(x=-30, y=-85, labels = "33")
lines(c(0,0), c(-90,-50), lwd=2)
lines(c(0,20), c(-50,-50), lwd=2)
lines(c(20,20), c(-50,-90), lwd=2)
text(x=10, y=-60, labels = "36")
lines(c(10,10), c(-50,-35), lwd=2)
lines(c(10,40), c(-35,-35), lwd=2)
lines(c(40,40), c(-35,-90), lwd=2)
text(x=25, y=-45, labels = "48")
lines(c(-30,-30), c(-75,-20), lwd=2)
lines(c(-30,25), c(-20,-20), lwd=2)
lines(c(25,25), c(-20,-35), lwd=2)
text(x=-2.5, y=-30, labels = "51")
text(x=-50, y=100, labels = "a)")
text(x=-50, y=55, labels = "b)")
text(x=-50, y=-20, labels = "c)")
hcl=hclust(clsd, method="single")
plot(hcl, main="", hang=0, xlab="")
abline(h=40, col=2)
cutree(hcl, h=40)
library(openxlsx)
urlj="https://doi.org/10.1371/journal.pone.0093281.s001"
download.file(urlj, "p.xlsx", mode="wb")
iso=read.xlsx("p.xlsx")
plot(iso$N~iso$C, col=as.numeric(as.factor(iso$Food.Chain)),xlim=c(-35, 0), pch=as.numeric(as.factor(iso$Species)),  xlab=expression(paste(delta, "13C")),
ylab=expression(paste(delta, "15N")))
legend("topright", legend=unique(as.factor(iso$Food.Chain)),pch=1,
col=as.numeric(unique(as.factor(iso$Food.Chain))), bty="n", title="Food chain")
legend("bottomright",legend=as.character(unique(as.factor(iso$Species))),
pch=as.numeric(unique(as.factor(iso$Species))), bty="n")
str(iso)
diso<-dist((iso[,c("C","N")]), method="euclidean")
p=hclust(diso,method="single")
plot(p, cex=0.5,main="")
niso=iso[complete.cases(iso),]
niso=niso[-5,]
diso<-dist((niso[,c("C","N")]), method="euclidean")
p=hclust(diso,method="single")
niso$clust<-cutree(p,k=4)
#plotting the data with 4 groups identified by the single-linkage cluster analysis superimposed
plot(niso$N~niso$C, col=as.numeric(as.factor(niso$clust)),xlim=c(-35, 0), pch=as.numeric(as.factor(niso$Species)),  xlab=expression(paste(delta, "13C")),
ylab=expression(paste(delta, "15N")))
legend("topright", legend=unique(as.factor(niso$clust)),pch=1,
col=as.numeric(unique(as.factor(niso$clust))), bty="n", title="cluster")
legend("bottomright",legend=as.character(unique(as.factor(niso$Species))), pch=as.numeric(unique(as.factor(niso$Species))), bty="n",title="Species")
x1=rnorm(50, 0,7)
y1=0.85*x1
er=rnorm(50,0,3)
y1=y1+er
y2=y1-fitted(lm(y1 ~ x1))
par(mfrow=c(1,2))
plot(x1,y1,
xlim = c(-20,20),ylim=c(-20,20),
pch=16, col=rgb(red=0.3, green=0.6, blue=0.3, alpha=0.3),
xlab="x", ylab="y")
#points(x2,y2,pch=16,col=4)
lines(x1, fitted(lm(y1 ~ x1)), col = 4, lwd=2)
plot(x1,y2,
xlim = c(-20,20),ylim=c(-20,20),
pch=16, col=rgb(red=0.3, green=0.6, blue=0.3, alpha=0.3),
xlab="xy synthesis", ylab="")
lines(x1, rep(0, length(x1)), col = 4, lwd=2)
par(mar = c(0, 0, 0, 0))
plot(0,pch = '',ann=FALSE,frame.plot = FALSE,axes = FALSE,
xlim = c(-40,40),ylim = c(-65,10))
segments(-35,0,-35,-60, lwd = 2.5)
a=seq(from=-34, to=-8)
segments(a,0,a,-60)
segments(-7,0,-7,-60, lwd = 2.5)
segments(-35,0,-7,0, lwd = 2.5)
b=seq(from=-3, to=-57, by=-3)
segments(-35,b,-7,b)
segments(-7,0,-7,-60, lwd = 2.5)
segments(-35,-60,-7,-60, lwd = 2.5)
text(-21,3, labels = "p", font = 2)
text(-38,-26, labels = "n", font = 2)
text(-21,-25, labels = "A", font = 3, cex = 2)
segments(15,0,15,-60, lwd = 2.5, col = 4)
c=seq(from=16, to=24, by=1)
segments(c,0,c,-60)
segments(25,0,25,-60, lwd = 2.5, col = 4)
segments(15,0,25,0, lwd = 2.5, col = 4)
b=seq(from=-3, to=-57, by=-3)
segments(15,b,25,b)
segments(15,-60,25,-60, lwd = 2.5, col = 4)
text(20,3, labels = "k", font = 2, col = 4)
text(12,-26, labels = "n", font = 2, col = 4)
text(20,-25, labels = "X", font = 3, cex = 2, col = 4)
library(kableExtra)
dt<-data.frame(stringsAsFactors = FALSE,
c("Principal component analysis (PCA)", "Correspondence analysis (CA)", "Principal coordinate analysis (PCoA)", "Nonmetric multidimensional scaling (nMDS)"),
c("Euclidean", "$\\chi^2$", "Any", "Any"),
c("Quantitative data, but not species community data", "Non-negative, quantitiative or binary data (e.g., species frequencies or presence/absence data)", "Quantitative, semiquantitative, qualitative, or mixed data", "Quantitative, semiquantitative, qualitative, or mixed data"))
colnames(x = dt) <-c("Method", "Distance", "Variables")
knitr::kable(dt, caption= "Domains of application of ordination methods (adapated from Legendre & Legendre 2012) ",  align="l", padding=10)
ctlns<-list(structure(list(level = 10, x = c(-0.8,0,1,2,2.5,3,3.1,2.8,2.3,2,1.8),
y = c(2.7,2.3,2.5,2.7,2.5,2,1.5,0,-1,-2,-3)),
.Names = c("level", "x", "y")))
ctlns2<-list(structure(list(level = 10, x = c(4,5.4,5.7,6,6.5,7,7.5,8,9,10.5,11.5,12.5,13.5),
y = c(-1.5,-0.1,0.7,2,3.2,4,4.5,4.7,4.6,4.3,4.2,4.5,5)),
.Names = c("level", "x", "y")))
x <- seq(0, 40, length=1000)
y <- dnorm(x, mean=3, sd=0.3)*-cosh(60)+2
#plot(x,y,type="l", xlab="time", ylab="Sine wave",frame.plot = FALSE,ann=FALSE,
#    xlim = c(-6,20),ylim = c(-6,12),axes = FALSE)
plot(rbind(c(2.6,3),c(3,4),c(3.5,4.6),c(3.6,5.2),c(3.5,2),c(4,2.8),c(4.5,2),
c(5,3.2),c(5.2,4),c(6,2.5),c(6,5),c(6.5,4),c(7,2),c(7,3),c(7,6.5),
c(7,5),c(8,4),c(8,5.5),c(8.5,4.5),c(9,6),c(9,7.2),c(9.5,5),c(10,7.5),
c(11,6)),pch = 21,ann=FALSE,frame.plot = FALSE,axes = FALSE,
xlim = c(-10,20),ylim = c(-10,12),col=4,
bg=rgb(red=0.3, green=0.6, blue=0.3, alpha=0.3))
arrows(0,0,18,0,col=4,cex=3,length = 0.1)
arrows(0,0,0,11,col=4,cex=3,length = 0.1)
arrows(1.5,-3.5,-1.5,3.5,col=2,cex=3,length = 0.1)
arrows(1.5,-3.5,17,7,col=2,cex=3,length = 0.1)
segments(0,0,15,10,col=5,cex=3,lty="dashed")
text(x=18, y=-1, labels = "X1")
text(x=-1, y=11, labels = "X2")
text(x=17, y=5, labels = "Y1")
text(x=-3, y=3, labels = "Y2")
xspline(ctlns[[1]], shape=1)
xspline(ctlns2[[1]], shape=1)
text(x=5, y=-5, "Y1 axis selected to maximize variation explained")
text(x=5, y=-7, "Y2 axis must be orthogonal to Y1 and maximize variation explained")
data("iris")
str(iris); summary(iris[1:4])
pairs(iris[1:4],main="Iris Data", pch=as.numeric(iris$Species)+14, col=as.numeric(iris$Species)+1)
pca <- prcomp(iris[,1:4])
summary(pca)
apply(iris[,1:4], 2, var)
p <- prcomp(iris[,1:4], scale=TRUE)
summary(p)
screeplot(p, type=("lines"),main="",pch=16, cex=1)
pvar=round(summary(p)$importance[2,1:2],2)
plot(p$x[,1:2], col=as.numeric(iris$Species)+1,ylim=c(-3,3), cex=1,
pch=as.numeric(iris$Species)+14,
xlab=paste0("PC1 (", pvar[1]*100, "%)"),
ylab=paste0("PC2 (", pvar[2]*100, "%)"))
legend("topright", legend=unique(iris$Species),pch=as.numeric(unique(iris$Species))+14,, col=c(2,3,4), bty="n")
kable(p$rotation,digits=2,caption="Eigenvectors for each variable and synthetic axis", format="html",table.attr = "style='width:50%;'", align="c")
plot(NA,ylim=c(-5,4), xlim=c(-5,4),
xlab=paste0("PC1 (", pvar[1]*100, "%)"),
ylab=paste0("PC2 (", pvar[2]*100, "%)"))
abline(v=0, col="grey90")
abline(h=0, col="grey90")
# Get co-ordinates of variables (loadings), and multiply by 10
l.x <- p$rotation[,1]*4
l.y <- p$rotation[,2]*4
# Draw arrows
arrows(x0=0, x1=l.x, y0=0, y1=l.y, col=5, length=0.15, lwd=1.5)
# Label position
l.pos <- l.y # Create a vector of y axis coordinates
lo <- which(l.y < 0) # Get the variables on the bottom half of the plot
hi <- which(l.y > 0) # Get variables on the top half
# Replace values in the vector
l.pos <- replace(l.pos, lo, "1")
l.pos <- replace(l.pos, hi, "3")
l.pos[4] <- "3"
l.x[3:4] <- l.x[3:4]+0.75
# Variable labels
text(l.x, l.y, labels=row.names(p$rotation), col=5, pos=l.pos, cex=1)
plot(p$x[,1:2],
pch=as.numeric(iris$Species)+14,
col=as.numeric(iris$Species)+1,
ylim=c(-5,4), xlim=c(-4,4),
cex=1,
xlab=paste("PC1 (", pvar[1]*100, "%)"),
ylab=paste("PC2 (", pvar[2]*100, "%)"))
legend("topleft", legend=unique(iris$Species), pch=as.numeric(unique(iris$Species))+14,
col=c(2,3,4), bty="n")
# Get co-ordinates of variables (loadings), and multiply by a constant
l.x <- p$rotation[,1]*4
l.y <- p$rotation[,2]*4
# Draw arrows
arrows(x0=0, x1=l.x, y0=0, y1=l.y, col=5, length=0.15, lwd=1.5)
# Label position
l.pos <- l.y # Create a vector of y axis coordinates
lo <- which(l.y < 0) # Get the variables on the bottom half of the plot
hi <- which(l.y > 0) # Get variables on the top half
# Replace values in the vector
l.pos <- replace(l.pos, lo, "1")
l.pos <- replace(l.pos, hi, "3")
l.pos[4] <- "3"
l.x[3:4] <- l.x[3:4]+0.75
# Variable labels
text(l.x, l.y, labels=row.names(p$rotation), col=5, pos=l.pos, cex=1)
library(vegan)
nMDS <- metaMDS(iris[,-5], distance = "bray", k = 2, trace=FALSE)
par(mfrow=c(1,2))
# Plot the stressplot
stressplot(nMDS, pch=16,l.col=NA, las=1)
# Plot the ordination
plot(nMDS$points,
pch=as.numeric(iris$Species)+14,
col=as.numeric(iris$Species)+1,
ylim=c(-.3,.3), xlim=c(-.6,.75),
cex=0.7,
xlab="nMDS1",
ylab="nMDS2")
legend("bottomleft", legend=unique(iris$Species),
pch=as.numeric(unique(iris$Species))+14,col=c(2,3,4), bty="n", cex=1)
# Get co-ordinates of variables, and multiply by scale
l.x2 <- nMDS$species[-1,1]*1.25
l.y2 <- nMDS$species[-1,2]*1.25
# Draw arrows
arrows(x0=0, x1=l.x2, y0=0, y1=l.y2, col=5, length=0.1, lwd=2)
# Variable labels
l.x1 <- nMDS$species[,1]*1.25
l.y1 <- nMDS$species[,2]*1.25
text(l.x1, l.y1, labels=row.names(nMDS$species), col=1, pos=3, cex=.8)
library(vegan)
data(varespec)
nMDS <- metaMDS(varespec,trymax = 100, distance="bray", k=2, trace=FALSE)
svarespec=wisconsin(varespec)
disimvar=vegdist(svarespec, method = "bray")
PCoA <- cmdscale(disimvar, k = 2, eig = T, add = T )
str(PCoA)
par(mfrow=c(1,2))
ordipointlabel(nMDS, pch=c(NA,NA), cex=c(1.2, .6), xlim=c(-.6, 1.2))
abline(h=0, col="grey")
abline(v=0, col="grey")
PCoA$species<- wascores(PCoA$points,varespec, expand=TRUE)
ordipointlabel(PCoA, pch=c(NA,NA), cex=c(1.2, .6),xlab="PCoA1",ylab="PCoA2",
xlim=c(-.6, 1.), ylim=c(-.5,0.6))
abline(h=0, col="grey")
abline(v=0, col="grey")
par(mar=c(0,0,0,0))
plot(1,pch = '',ann=FALSE,frame.plot = FALSE,axes = FALSE,
xlim = c(-36,36),ylim = c(-35,35))
segments(-20,5,-10,5)
segments(-20,5,-20,30)
segments(-10,5,-10,30)
segments(-20,30,-10,30)
text(x=-15, y=32, labels = "Variables y1 ... yp",cex = 1.)
text(x=-15, y=17.5, labels = "matrix Y", cex = 1.2, font = 2)
text(x=-22, y=17.5, labels = "Objects 1 to n", cex = 1., srt=90)
text(x=-15, y=36, labels = "Simple ordination: PCA/CA",cex = 1.1)
segments(5,5,10,5)
segments(5,30,5,5)
segments(5,30,10,30)
segments(10,5,10,30)
text(x=7.5, y=32, labels = "Variable y",cex = 1.)
text(x=7.5, y=17.5, labels = "y", cex = 1.2, font = 2)
text(x=3, y=17.5, labels = "Objects 1 to n", cex = 1., srt=90)
segments(15,5,30,5)
segments(15,30,15,5)
segments(30,5,30,30)
segments(15,30,30,30)
text(x=22.5, y=32, labels = "Variables x1 ... xm",cex = 1.)
text(x=22.5, y=17.5, labels = "matrix X", cex = 1.2, font = 2)
text(x=17, y=36, labels = "Multiple regression",cex = 1.1)
arrows(10.5,17.5,14.5,17.5,angle=60,length=0.1, lwd=2)
arrows(14.5,17.5,10.5,17.5,angle=60, length=0.1, lwd=2)
text(x=0, y=-3, labels = "Ordination under constraint: RDA/CCA",cex = 1.1)
segments(-12,-10,-2,-10)
segments(-12,-35,-12,-10)
segments(-2,-35,-2,-10)
segments(-12,-35,-2,-35)
text(x=-8, y=-8, labels = "Variables y1 ... yp",cex = 1.)
text(x=-7, y=-22.5, labels = "matrix Y", cex = 1.2, font = 2)
text(x=-14, y=-22.5, labels = "Objects 1 to n", cex = 1., srt=90)
segments(2,-10,2,-35)
segments(2,-10,14,-10)
segments(2,-35,14,-35)
segments(14,-10,14,-35)
text(x=9, y=-8, labels = "Variables x1 ... xm",cex = 1)
text(x=8, y=-22.5, labels = "matrix X", cex = 1.2, font = 2)
arrows(-1.5,-22.5,1.5,-22.5,angle=60,length=0.1, lwd=2)
arrows(1.5,-22.5,-1.5,-22.5,angle=60,length=0.1,lwd=2)
library(vegan)
data("varespec")
data("varechem")
plot(varechem, gap=0, panel=panel.smooth, cex.lab=1.2, lwd=2, pch=16, cex=.75, col=rgb(.5,.5,.7,.8))
stvarespec=as.data.frame(wisconsin(varespec))
scvarechem=as.data.frame(scale(varechem))
constr <- vegan::rda(stvarespec~., data=scvarechem)
constr
ord3=vegan::rda(stvarespec~N+K+Al, data=scvarechem)
ord3
par(mfrow=c(1,1))
sp.scores=scores(optm, display="species", scaling=1)
sp.scores=sp.scores[sp.scores[,1]>abs(.1) | sp.scores[,2]>abs(.1),]
plot(optm,scaling=1,type="n",main="Sites scaling (scaling=1)",
ylim=c(-.2,.2), xlim=c(-.3,.5))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.6, pos=3)
text(optm, display="bp", scaling=1,cex=.8,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=1, cex=1)
par(mfrow=c(1,1))
sp.scores=scores(optm, display="species", scaling=1)
sp.scores=sp.scores[sp.scores[,1]>abs(.1) | sp.scores[,2]>abs(.1),]
plot(optm,scaling=1,type="n",main="Sites scaling (scaling=1)",
ylim=c(-.2,.2), xlim=c(-.3,.5))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05, col=4)
text(sp.scores, row.names(sp.scores), col=textcol[2], cex=.6, pos=3)
text(optm, display="bp", scaling=1,cex=.8,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=1, cex=1)
par(mfrow=c(1,2))
# Triplots of the parsimonious RDA (scaling=1)
# Scaling 1
plot(optm, scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
# Triplots of the parsimonious RDA (scaling=2)
# Scaling 2
plot(optm, scaling="species", main="Species scaling (scaling=2)")
par(mfrow=c(1,1))
sp.scores=scores(optm, display="species", scaling=1)
sp.scores=sp.scores[sp.scores[,1]>abs(.1) | sp.scores[,2]>abs(.1),]
plot(optm,scaling=1,type="n",main="Sites scaling (scaling=1)",
ylim=c(-.2,.2), xlim=c(-.3,.5))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.6, pos=3)
text(optm, display="bp", scaling=1,cex=.8,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=1, cex=1)
stvarespec=as.data.frame(wisconsin(varespec))
scvarechem=as.data.frame(scale(varechem))
constr <- vegan::rda(stvarespec~., data=scvarechem)
constr
anova(ord3)
anova(ord3, by="term", permutations=199)
anova(ord3, by="term", permutations=199)
optm
par(mfrow=c(1,2))
# Triplots of the parsimonious RDA (scaling=1)
# Scaling 1
plot(optm, scaling="sites", main="Sites scaling (scaling=1)", correlation=TRUE)
# Triplots of the parsimonious RDA (scaling=2)
# Scaling 2
plot(optm, scaling="species", main="Species scaling (scaling=2)")
par(mfrow=c(1,1))
sp.scores=scores(optm, display="species", scaling=1)
sp.scores=sp.scores[sp.scores[,1]>abs(.1) | sp.scores[,2]>abs(.1),]
plot(optm,scaling=1,type="n",main="Sites scaling (scaling=1)",
ylim=c(-.2,.2), xlim=c(-.3,.5))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.6, pos=3)
text(optm, display="bp", scaling=1,cex=.8,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=1, cex=1)
plot(optm,scaling=2,type="n",main="Species scaling (scaling=2)",
ylim=c(-.4,.4))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.6, pos=3)
text(optm, display="bp", scaling=2,cex=.7,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=2, cex=1)
plot(optm,scaling=2,type="n",main="Species scaling (scaling=2)",
ylim=c(-.4,.4))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.7, pos=3)
text(optm, display="bp", scaling=2,cex=.7,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=2, cex=1)
plot(optm,scaling=2,type="n",main="Species scaling (scaling=2)",
ylim=c(-.4,.4))
arrows(x0=0,y0=0,sp.scores[,1], sp.scores[,2], length=0.05)
text(sp.scores, row.names(sp.scores), col=2, cex=.7, pos=3)
text(optm, display="bp", scaling=2,cex=.8,lwd=1.5,
row.names(scores(optm, display="bp")), col=4)
text(optm,display=c("sites"),scaling=2, cex=1)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
