#b=breakpoints(metric ~ year, data=pdat)
print(b)
cat('\n\n<!-- -->\n\n')
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
#   if (length(mss)>0){
#  bfac.ri=fac.ri[1:(mss-1)]
#  bfac.ri=c(bfac.ri, NA)
#  bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
#   }else{
#     bfac.ri= fac.ri
time=as.factor(fac.ri)
fm.riT2 <- lm(TP ~ time:year+time, data=pdat, weights=weights)
fm.riT <- lm(TP ~ time:year, data=pdat, weights=weights)
fm.ri <- lm(TP ~ time+year, data=pdat, weights=weights)
fm.riN <- lm(TP ~ year, data=pdat,weights=weights)
sc=(AIC(fm.ri, fm.riN,fm.riT, fm.riT2))
bm=which.min(sc[,2])
fm.ri=fm.riT2
} else {
fm.ri <- lm(TP ~ year, data=pdat,weights=weights)
}
#table of output
reglist[[i]]=fm.ri
#summary(fm.ri)$adj.r.squared
amscale=mscale
amscale=c(0, 0.1)
if (i==3) amscale[2]=amscale[2]/2
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
# ann=FALSE,
xlim=xyear, ylim=amscale,las=2,yaxp=c(0,round(0.1,2),4))
if ( i==3)axis(side=1, las=1)
legend("topright",stlabel[i], bty="n",
cex=1.5)
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
#convert confidence intervals from julian day to dates
#and draw
#draw breakpoints & confidence intervals
if (sum(!is.na(b$breakpoints))>0){
ci=confint(b)$confint
ci=ci[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.05,]
hgt=40
#  if (i==3) hgt=4
tm=nrow(ci)
if (length(tm)==0|tm==0) tm=1
yn=rep(hgt,tm)
if (tm==1) {
s=1
xn=pdat$year[ci[1]]
xx=pdat$year[ci[3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
text(pdat$year[ci[2]]-2.5,2, pdat$year[ci[2]])
abline(v=pdat$year[ci[2]], lty=2, col="blue")
} else {
yn=rep(hgt,tm)
s=1:tm
xn=pdat$year[ci[,1]]
xx=pdat$year[ci[,3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
abline(v=pdat$year[ci[,2]], lty=2, col="blue")
text(pdat$year[ci[,2]]-2.5,y=amscale[2], pdat$year[ci[,2]])
}
}
tm
length(tm)
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
ann=FALSE, xlim=xyear, ylim=c(0,ymax+0.01), las=2, yaxp=c(0,ymax,3))
lines(pdat$fit~pdat$year, col = 2, lwd=2)
pdat$fit
mpred=as.data.frame(predict(tp3, spydat, interval="confidence"))
mpred
cll=confint(b)$confint
cll
ci=cll[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.05,]
ci
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
# ann=FALSE,
xlim=xyear, ylim=amscale,las=2,yaxp=c(0,round(0.1,2),4))
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
cll=confint(b)$confint
ci=cll[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.05,]
abline(v=pdat$year[cll[2]], lty=2, col="light grey")
abline(v=pdat$year[ci[2]], lty=2, col="blue")
cll
ci
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
# ann=FALSE,
xlim=xyear, ylim=amscale,las=2,yaxp=c(0,round(0.1,2),4))
abline(v=pdat$year[cll[2]], lty=2, col="light grey")
abline(v=pdat$year[ci[2]], lty=2, col="light blue")
#draw breakpoints & confidence intervals
if (sum(!is.na(b$breakpoints))>0){
cll=confint(b)$confint
ci=cll[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.05,]
hgt=0.1
#  if (i==3) hgt=4
tm=nrow(ci)
if (length(tm)==0) {
tm=1
} else if (tm==0)  {
tm=1
}
yn=rep(hgt,tm)
if (tm==1) {
s=1
xn=pdat$year[ci[1]]
xx=pdat$year[ci[3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
text(pdat$year[ci[2]]-2.5,2, pdat$year[ci[2]])
abline(v=pdat$year[ci[2]], lty=2, col="blue")
} else {
yn=rep(hgt,tm)
s=1:tm
xn=pdat$year[ci[,1]]
xx=pdat$year[ci[,3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
abline(v=pdat$year[ci[,2]], lty=2, col="blue")
abline(v=pdat$year[cll[2]], lty=2, col="light grey")
text(pdat$year[ci[,2]]-2.5,y=amscale[2]-.05, pdat$year[ci[,2]])
}
}
text(pdat$year[ci[,2]]-2.5,y=amscale[2]-.05, pdat$year[ci[,2]])
text(pdat$year[ci[2]]-2.5,2, pdat$year[ci[2]])
pdat$year[ci[2]]
text(pdat$year[ci[2]]-2.5,2, pdat$year[ci[2]])
text(pdat$year[ci[2]]-2.5,2, pdat$year[ci[2]])
cll
ci
str(cll)
str)ci
str(ci)
ci
cll
rm(list=ls())
ci
rm(list=ls())
library(rmarkdown)
library(kableExtra)
i=1
pdat=spydat[spydat$Station_Acronym==stvec[i],]
dat=ts(spydat$TP[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
mss=which(!complete.cases(pdat))
if (length(mss)>0) pdat=pdat[-mss,]
#b=breakpoints(dat~1)
b=breakpoints(TP ~ year, data=pdat)
#b=breakpoints(metric ~ year, data=pdat)
print(b)
cat('\n\n<!-- -->\n\n')
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
#   if (length(mss)>0){
#  bfac.ri=fac.ri[1:(mss-1)]
#  bfac.ri=c(bfac.ri, NA)
#  bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
#   }else{
#     bfac.ri= fac.ri
time=as.factor(fac.ri)
fm.riT2 <- lm(TP ~ time:year+time, data=pdat, weights=weights)
fm.riT <- lm(TP ~ time:year, data=pdat, weights=weights)
fm.ri <- lm(TP ~ time+year, data=pdat, weights=weights)
fm.riN <- lm(TP ~ year, data=pdat,weights=weights)
sc=(AIC(fm.ri, fm.riN,fm.riT, fm.riT2))
bm=which.min(sc[,2])
fm.ri=fm.riT2
} else {
fm.ri <- lm(TP ~ year, data=pdat,weights=weights)
}
#table of output
fm.no<- lm(TP ~ year, data=pdat,weights=weights)
reglist[[i]]=fm.ri
regnolist[[i]]=fm.no
#summary(fm.ri)$adj.r.squared
library(openxlsx)
my_data <-(as.data.frame(read.csv("E:/homeoffice/kim/Quinte/Quinte2022.csv")))
#rename col in recent file
colnames(my_data)[1]<-"Station_Acronym"
colnames(my_data)[colnames(my_data)=="Kd"] <- "epar"
colnames(my_data)[colnames(my_data)=="Secchi"] <- "secchi"
colnames(my_data)[colnames(my_data)=="chl"] <- "Chla"
colnames(my_data)[colnames(my_data)=="TotalPhyto"]<-"Phyto_BM"
mmetric="epar" #select which metric to analyze
#mlab=expression(Light~attenuation~(m^-1))
#mlab=expression(Chlorophyll~a~(mu~g~L^-1))
mlab=expression(Total~phosophorus~(mg~L^-1))
#sscal=1.25 #clorophyll and round 1
sscal=1. #clorophyll and round 1
sscal=0.01 #clorophyll and round 1
#aggregate and run analysis on selected sites
frm=paste(mmetric,"~ Station_Acronym+year")
spydat=aggregate(as.formula(frm), my_data, length)
mdat=aggregate(as.formula(frm), my_data, mean)
colnames(spydat)[3]="n"
spydat[4]=mdat[3]
colnames(spydat)[4]="metric"
spydat$weights <- spydat$n/mean(spydat$n)
agg <- aggregate(list(metric=my_data[mmetric],TP=my_data$TP),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=mean, na.rm=TRUE, na.action="na.pass")
agg2 <- aggregate(list(metricN=my_data[mmetric]),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=length)
agg$n=agg2[,3]
agg$weights <- agg$n/mean(agg$n)
colnames(agg)[3]="metric"
colnames(agg)[4]="TP"
#select sites on which to run analysis
stvec=c("B", "HB",  "C")
stlabel=c("Belleville", "Hay Bay", "Conway")
#select sites on which to run analysis
par(mfrow=c(3,2), mar=c(0,4,0,3), oma=c(5,5,2,2),cex.axis=1.25)
spydat=agg[agg$Station_Acronym%in%stvec,]
xyear=c(1972,2008)
spydat=spydat[spydat$year%in%c(1972:2008),]
spydat$Station_Acronym=as.factor(spydat$Station_Acronym)
#str(spydat)
#rm(list=ls())
library(strucchange)
site=stvec
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
#TP model
tp1=(lm(TP~year:Station_Acronym, weights=weights, data=spydat))
tp2=(lm(TP~year+Station_Acronym, weights=weights, data=spydat))
tp3=(lm(TP~year:Station_Acronym+Station_Acronym, weights=weights, data=spydat))
cop=AIC(tp1,tp2,tp3)
m1=which.min(cop$AIC)
mod=row.names(cop)[m1]
bestmod=as.name(mod)
#summary(eval(bestmod))
mpred=as.data.frame(predict(tp3, spydat, interval="confidence"))
spydat=cbind(spydat, mpred)
#spydat$tres=spydat$TP-spydat$tmodel
par(mfrow=c(3,1), mar=c(1,4,0,3), oma=c(5,5,2,2),
cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
for (i in 1:length(stvec)) {
pdat=spydat[spydat$Station_Acronym==stvec[i],]
mscale=c(min(pdat$TP, na.rm=TRUE)-sscal,
max(pdat$TP, na.rm=T)+sscal)
amscale=mscale
mss=which(!complete.cases(pdat))
if (length(mss)>0) pdat=pdat[-mss,]
if (i==3) {
amscale[2]=mscale[2]/3
}
ymax=round(max(pdat$TP, na.rm=T),2)
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
ann=FALSE, xlim=xyear, ylim=c(0,ymax+0.01), las=2, yaxp=c(0,ymax,3))
if ( i==3)axis(side=1, las=1)
legend("bottomleft",stlabel[i], bty="n",
cex=1.5)
lines(pdat$fit~pdat$year, col = 2, lwd=2)
lines(pdat$lwr~pdat$year, col = "pink", lwd=2, lty=2)
lines(pdat$upr~pdat$year, col = "pink", lwd=2, lty=2)
}
treg=summary(tp3)$coefficients
regco=kable(treg, digits=2,
#format="html", table.attr = "style='width:60%;'",
caption="TP~year")
tsave=footnote(kable_classic(regco),
general = paste("adj. R squared=", round((summary(tp3)$adj.r.squared),2)),
footnote_as_chunk = TRUE,
general_title = "")
tsave
#fname=paste0(mmetric,"Site", stvec[i],".png")
#print(tsave)
#cat('\n\n<!-- -->\n\n')
i=1
pdat=spydat[spydat$Station_Acronym==stvec[i],]
dat=ts(spydat$TP[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
mss=which(!complete.cases(pdat))
if (length(mss)>0) pdat=pdat[-mss,]
#b=breakpoints(dat~1)
b=breakpoints(TP ~ year, data=pdat)
#b=breakpoints(metric ~ year, data=pdat)
print(b)
cat('\n\n<!-- -->\n\n')
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
#   if (length(mss)>0){
#  bfac.ri=fac.ri[1:(mss-1)]
#  bfac.ri=c(bfac.ri, NA)
#  bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
#   }else{
#     bfac.ri= fac.ri
time=as.factor(fac.ri)
fm.riT2 <- lm(TP ~ time:year+time, data=pdat, weights=weights)
fm.riT <- lm(TP ~ time:year, data=pdat, weights=weights)
fm.ri <- lm(TP ~ time+year, data=pdat, weights=weights)
fm.riN <- lm(TP ~ year, data=pdat,weights=weights)
sc=(AIC(fm.ri, fm.riN,fm.riT, fm.riT2))
bm=which.min(sc[,2])
fm.ri=fm.riT2
} else {
fm.ri <- lm(TP ~ year, data=pdat,weights=weights)
}
#table of output
fm.no<- lm(TP ~ year, data=pdat,weights=weights)
reglist[[i]]=fm.ri
reglist=list()
regnolist=list()
pdat=spydat[spydat$Station_Acronym==stvec[i],]
dat=ts(spydat$TP[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
mss=which(!complete.cases(pdat))
if (length(mss)>0) pdat=pdat[-mss,]
#b=breakpoints(dat~1)
b=breakpoints(TP ~ year, data=pdat)
#b=breakpoints(metric ~ year, data=pdat)
print(b)
cat('\n\n<!-- -->\n\n')
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
#   if (length(mss)>0){
#  bfac.ri=fac.ri[1:(mss-1)]
#  bfac.ri=c(bfac.ri, NA)
#  bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
#   }else{
#     bfac.ri= fac.ri
time=as.factor(fac.ri)
fm.riT2 <- lm(TP ~ time:year+time, data=pdat, weights=weights)
fm.riT <- lm(TP ~ time:year, data=pdat, weights=weights)
fm.ri <- lm(TP ~ time+year, data=pdat, weights=weights)
fm.riN <- lm(TP ~ year, data=pdat,weights=weights)
sc=(AIC(fm.ri, fm.riN,fm.riT, fm.riT2))
bm=which.min(sc[,2])
fm.ri=fm.riT2
} else {
fm.ri <- lm(TP ~ year, data=pdat,weights=weights)
}
#table of output
fm.no<- lm(TP ~ year, data=pdat,weights=weights)
reglist[[i]]=fm.ri
regnolist[[i]]=fm.no
#summary(fm.ri)$adj.r.squared
amscale=mscale
amscale=c(0, 0.1)
if (i==3) amscale[2]=amscale[2]/2
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
# ann=FALSE,
xlim=xyear, ylim=amscale,las=2,yaxp=c(0,round(0.1,2),4))
if ( i==3)axis(side=1, las=1)
legend("topright",stlabel[i], bty="n",
cex=1.5)
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
if (sum(!is.na(b$breakpoints))>0){
cis=confint(b)$confint
cll=cis[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.25,]
ci=cis[summary(fm.ri)$coefficients[2:(1+length(b$breakpoints)),4]<0.25,]
}
cis
ci
cll
tm=nrow(ci)
tm
if (length(tm)==0) {
tm=1
} else if (tm==0)  {
tm=1
}
tm
plot(TP~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
# ann=FALSE,
xlim=xyear, ylim=amscale,las=2,yaxp=c(0,round(0.1,2),4))
if ( i==3)axis(side=1, las=1)
legend("topright",stlabel[i], bty="n",
cex=1.5)
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
abline(v=pdat$year[ci[,2]], lty=2, col="blue")
i=1
regs=summary(reglist[[i]])$coefficients
rsq=round((summary(reglist[[i]])$adj.r.squared),2)
regn=summary(regnolist[[i]])$coefficients
regout=list(regs,regn)
regco=kable((regout), digits=2,
#format="html", table.attr = "style='width:60%;'",
caption=paste("TP","Site", stvec[i]))
tsave=footnote(kable_classic(regco),
general = paste("adj. R squared=",rsq),
footnote_as_chunk = TRUE,
general_title = "")
#fname=paste0(mmetric,"Site", stvec[i],".png")
tsave
?footnote
AIC(reglist[[i]],regolist[[i]])
AIC(reglist[[i]],regnolist[[i]])
reglist[[i]]$model
reglist[[i]]$call
AIC(reglist[[i]],regolist[[i]])
AIC(reglist[[i]],regolist[[i]])
AIC(reglist[[i]],regnolist[[i]])
tabtext=data.frame(model=c(reglist[[i]]$call, regnolist[[i]]$call),
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
sics=AIC(reglist[[i]],regolist[[i]])
tabtext=data.frame(model=c(reglist[[i]]$call, regnolist[[i]]$call),
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
sics=AIC(reglist[[i]],regnolist[[i]])
tabtext=data.frame(model=c(reglist[[i]]$call, regnolist[[i]]$call),
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
c(reglist[[i]]$call, regnolist[[i]]$call)
str(c(reglist[[i]]$call, regnolist[[i]]$call))
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
model
sics=AIC(reglist[[i]],regnolist[[i]])
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
tabtext=data.frame(model=model,
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
tabtext
i=1
regs=summary(reglist[[i]])$coefficients
rsq=round((summary(reglist[[i]])$adj.r.squared),2)
regn=summary(regnolist[[i]])$coefficients
regout=list(regs,regn)
regco=kable((regout), digits=2,
#format="html", table.attr = "style='width:60%;'",
caption=paste("TP","Site", stvec[i]))
sics=AIC(reglist[[i]],regnolist[[i]])
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
tabtext=data.frame(model=model,
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
tsave=footnote(kable_classic(regco),
# general = paste("adj. R squared=",rsq),
general=tabtext
footnote_as_chunk = TRUE,
i=1
regs=summary(reglist[[i]])$coefficients
rsq=round((summary(reglist[[i]])$adj.r.squared),2)
regn=summary(regnolist[[i]])$coefficients
regout=list(regs,regn)
regco=kable((regout), digits=2,
#format="html", table.attr = "style='width:60%;'",
caption=paste("TP","Site", stvec[i]))
sics=AIC(reglist[[i]],regnolist[[i]])
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
tabtext=data.frame(model=model,
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
tsave=footnote(kable_classic(regco),
# general = paste("adj. R squared=",rsq),
general=tabtext,
footnote_as_chunk = TRUE,
general_title = "")
#fname=paste0(mmetric,"Site", stvec[i],".png")
tsave
i=1
regs=summary(reglist[[i]])$coefficients
rsq=round((summary(reglist[[i]])$adj.r.squared),2)
regn=summary(regnolist[[i]])$coefficients
regout=list(regs,regn)
regco=kable((regout), digits=2,
#format="html", table.attr = "style='width:60%;'",
caption=paste("TP","Site", stvec[i]))
sics=AIC(reglist[[i]],regnolist[[i]])
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
tabtext=data.frame(model=model,
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
tsave=footnote(kable_classic(regco),
# general = paste("adj. R squared=",rsq),
general=tabtext,
footnote_as_chunk = FALSE,
general_title = "")
#fname=paste0(mmetric,"Site", stvec[i],".png")
tsave
i=1
regs=summary(reglist[[i]])$coefficients
rsq=round((summary(reglist[[i]])$adj.r.squared),2)
regn=summary(regnolist[[i]])$coefficients
regout=list(regs,regn)
regco=kable((regout), digits=2,
#format="html", table.attr = "style='width:60%;'",
caption=paste("TP","Site", stvec[i]))
sics=AIC(reglist[[i]],regnolist[[i]])
model=as.character(c(reglist[[i]]$call, regnolist[[i]]$call))
tabtext=data.frame(model=model,
AIC=sics[,2], Rsq=c(rsq,regnolist[[i]]$adj.r.squared))
tsave=footnote(kable_classic(regco),
# general = paste("adj. R squared=",rsq),
general=c(tabtext[1,],tabtext[2,]),
footnote_as_chunk = FALSE,
general_title = "")
#fname=paste0(mmetric,"Site", stvec[i],".png")
tsave
relist
reglist
regnolist
acf(resid(regnolist[[1]]))
acf(resid(reglist[[1]]))
warnings()
setwd("C:/github/Basics")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
