b=breakpoints(metric ~ year, data=pdat)
print(b)
mss=which(is.na(dat))
fac.ri <- breakfactor(b, label = "seg")
if (length(mss)>0){
bfac.ri=fac.ri[1:(mss-1)]
bfac.ri=c(bfac.ri, NA)
bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
}else{
bfac.ri= fac.ri
}
bfac.ri=as.factor(bfac.ri)
fm.ri <- lm(metric ~ year + bfac.ri, data=pdat)
summary(fm.ri)
amscale=mscale
amscale=c(0, amscale[2])
amscale
if (i==3) amscale=mscale/3
plot(metric~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
ann=FALSE, xlim=xyear,ylim=amscale, las=2)
amscale
=mscale
mscale
amscale
amscale[2]
amscale=c(0, amscale[2])
amscalae
amscale
amscale=mscale
amscale=c(0, amscale[2])
amscale=mscale
amscale=c(0, amscale[2])
amscale
if (i==3) amscale[2]=mscale[2]/3
plot(metric~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
ann=FALSE, xlim=xyear,ylim=amscale, las=2)
if ( i==3)axis(side=1, las=1)
legend("bottomleft",stlabel[i], bty="n",
cex=1.5)
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
ci=confint(b)$confint
hgt=10
if (i==3) hgt=4
yn=rep(hgt,nrow(ci))+rnorm(5,1,1)
s=1:nrow(ci)
xn=pdat$year[ci[,1]]
xx=pdat$year[ci[,3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
abline(v=pdat$year[ci[,2]], lty=2, col="blue")
}
b=breakpoints(metric ~ year+TP, data=pdat)
print(b)
mss=which(is.na(dat))
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
if (length(mss)>0){
bfac.ri=fac.ri[1:(mss-1)]
bfac.ri=c(bfac.ri, NA)
bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
}else{
bfac.ri= fac.ri
}
bfac.ri=as.factor(bfac.ri)
fm.ri <- lm(metric ~ year + bfac.ri, data=pdat)
summary(fm.ri)
amscale=mscale
amscale=c(0, amscale[2])
if (i==3) amscale[2]=mscale[2]/3
plot(metric~year, data=pdat, type="b",xaxt="n",pch=16,col="grey",
ann=FALSE, xlim=xyear,ylim=amscale, las=2)
if ( i==3)axis(side=1, las=1)
legend("bottomleft",stlabel[i], bty="n",
cex=1.5)
bfm=predict( fm.ri, newdata=pdat)
lines(bfm~pdat$year, col = 2, lwd=2)
lines(bfm~pdat$year, col = 2, lwd=2)
#convert confidence intervals from julian day to dates
#and draw
#draw breakpoints & confidence intervals
ci=confint(b)$confint
hgt=10
if (i==3) hgt=4
yn=rep(hgt,nrow(ci))+rnorm(5,1,1)
s=1:nrow(ci)
xn=pdat$year[ci[,1]]
xx=pdat$year[ci[,3]]
yx=yn
segments(xn[s], yn[s], xx[s], yx[s], col="blue", lwd=2, lend="square")
abline(v=pdat$year[ci[,2]], lty=2, col="blue")
}
if (sum(!is.na(b$breakpoints))>0){
# fit segmented model
fac.ri <- breakfactor(b, label = "seg")
if (length(mss)>0){
bfac.ri=fac.ri[1:(mss-1)]
bfac.ri=c(bfac.ri, NA)
bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
}else{
bfac.ri= fac.ri
}
bfac.ri=as.factor(bfac.ri)
fm.ri <- lm(metric ~ year + bfac.ri, data=pdat)
summary(fm.ri)
}
bfac.ri
length(bfac.ri)
mss=which(is.na(dat))
mss
fac.ri <- breakfactor(b, label = "seg")
if (length(mss)>0){
bfac.ri=fac.ri[1:(mss-1)]
bfac.ri=c(bfac.ri, NA)
bfac.ri=c(bfac.ri, fac.ri[(mss):length(fac.ri)])
}else{
bfac.ri= fac.ri
}
length(bfac.ri)
length(pdat)
plot(tp, data=podat)
plot(tp, data=pdat)
plot(TP, data=pdat)
pdat$TP
plot(pdat$TP~pdat$year
)
View(spydat)
my_data <- read_excel("~/kim/Quinte/QUINTE.xlsx", sheet = 1)
library(openxlsx)
my_data <-(as.data.frame(read.xlsx("E:/homeoffice/kim/transients/quinte data/QUINTE.xlsx")))
colnames(my_data)[colnames(my_data)=="Epar#Ship"] <- "epar"
colnames(my_data)[colnames(my_data)=="Secchi_depth#Ship"] <- "secchi"
colnames(my_data)[colnames(my_data)=="Chl_a_uncorrected#GLLFAS"] <- "Chla"
colnames(my_data)[colnames(my_data)=="TOTAL_Daphnia_BM"]<-"daphnia"
colnames(my_data)[colnames(my_data)=="Total Phyto biomass searching Excel files"]<-"Phyto_BM"
mmetric="Chla" #select which metric to analyze
sscal=0.0001 #phosophorus and round 3
sscal=1.25 #clorophyll and round 1
#sscal=0.005 #phosophorus and round 3
#aggregate and run analysis on selected sites
frm=paste(mmetric,"~ Station_Acronym+year")
spydat=aggregate(as.formula(frm), my_data, length)
mdat=aggregate(as.formula(frm), my_data, mean)
colnames(spydat)[3]="n"
spydat[4]=mdat[3]
colnames(spydat)[4]="metric"
spydat$weights <- spydat$n/mean(spydat$n)
tdat=aggregate(TP~ Station_Acronym+year, my_data, length)
mdat=aggregate(as.formula(frm), my_data, FUN=mean, na.rm=TRUE, na.action="na.pass")
tdat
agg <- aggregate(list(metric=my_data[mmetric],TP=my_data$TP),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=mean, na.rm=TRUE, na.action="na.pass")
agg2 <- aggregate(list(metricN=my_data[mmetric]),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=length)
agg$n=agg2[,3]
agg$weights <- agg$n/mean(agg$n)
colnames(agg)[3]="metric"
spydat=agg[agg$Station_Acronym%in%stvec,]
View(spydat)
##########BREAKPOINT
par(cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
par(mfrow=c(3,2), mar= c(5, 5., 1.5, 1.1), oma=c(1,1,1,1))
site=c("B", "HB", "C")
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
site[i]
for(i in 1:3){
dat=ts(spydat$metric[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
b=breakpoints(dat~year)
print(b)
f=Fstats(dat~1)
bl=summary(lm(dat~1))
print(bl)
plot(dat, type="b", pch=16, xlab="",
ylab="",
ylim=c(0,2),
main=paste("                                                                                   Site ",
site[i]) ,
bty="L", lty=1)
#abline(v=summary(b)$breakdates[b,], col="red")
# text(breakdates(b)+3,max(dat)-0.05*max(dat), breakdates(b))
text(breakdates(b)+3,1.8, breakdates(b))
mtext(lylab[i], side = 2, line = -2, outer = TRUE, at = NA,
adj = NA, padj = NA, cex = 1.4, col = NA, font = NA)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))),
col = 4)
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
plot(summary(b)$RSS[2,], x=0:6,type="b", main="", xlab=bxlab[i],
ylab=bylab[i], bty="L", lty=1)
}
##########END BREAKPOINT
##########BREAKPOINT
par(cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
par(mfrow=c(3,2), mar= c(5, 5., 1.5, 1.1), oma=c(1,1,1,1))
site=c("B", "HB", "C")
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
site[i]
for(i in 1:3){
dat=ts(spydat$metric[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
b=breakpoints(dat~year)
print(b)
f=Fstats(dat~1)
bl=summary(lm(dat~1))
print(bl)
plot(dat, type="b", pch=16, xlab="",
ylab="",
ylim=c(0,2),
main=paste("                                                                                   Site ",
site[i]) ,
bty="L", lty=1)
#abline(v=summary(b)$breakdates[b,], col="red")
# text(breakdates(b)+3,max(dat)-0.05*max(dat), breakdates(b))
text(breakdates(b)+3,1.8, breakdates(b))
mtext(lylab[i], side = 2, line = -2, outer = TRUE, at = NA,
adj = NA, padj = NA, cex = 1.4, col = NA, font = NA)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))),
col = 4)
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
plot(summary(b)$RSS[2,], x=0:6,type="b", main="", xlab=bxlab[i],
ylab=bylab[i], bty="L", lty=1)
}
##########END BREAKPOINT
##########BREAKPOINT
par(cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
par(mfrow=c(3,2), mar= c(5, 5., 1.5, 1.1), oma=c(1,1,1,1))
site=c("B", "HB", "C")
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
site[i]
for(i in 1:3){
dat=ts(spydat$metric[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
b=breakpoints(dat~1)
print(b)
f=Fstats(dat~1)
bl=summary(lm(dat~1))
print(bl)
plot(dat, type="b", pch=16, xlab="",
ylab="",
ylim=c(0,2),
main=paste("                                                                                   Site ",
site[i]) ,
bty="L", lty=1)
#abline(v=summary(b)$breakdates[b,], col="red")
# text(breakdates(b)+3,max(dat)-0.05*max(dat), breakdates(b))
text(breakdates(b)+3,1.8, breakdates(b))
mtext(lylab[i], side = 2, line = -2, outer = TRUE, at = NA,
adj = NA, padj = NA, cex = 1.4, col = NA, font = NA)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))),
col = 4)
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
plot(summary(b)$RSS[2,], x=0:6,type="b", main="", xlab=bxlab[i],
ylab=bylab[i], bty="L", lty=1)
}
##########END BREAKPOINT
##########BREAKPOINT
par(cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
par(mfrow=c(3,2), mar= c(5, 5., 1.5, 1.1), oma=c(1,1,1,1))
site=c("B", "HB", "C")
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
site[i]
for(i in 1:3){
dat=ts(spydat$metric[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
b=breakpoints(dat~1)
print(b)
f=Fstats(dat~1)
bl=summary(lm(dat~1))
print(bl)
plot(dat, type="b", pch=16, xlab="",
ylab="",
ylim=c(0,50),
main=paste("                                                                                   Site ",
site[i]) ,
bty="L", lty=1)
#abline(v=summary(b)$breakdates[b,], col="red")
# text(breakdates(b)+3,max(dat)-0.05*max(dat), breakdates(b))
text(breakdates(b)+3,1.8, breakdates(b))
mtext(lylab[i], side = 2, line = -2, outer = TRUE, at = NA,
adj = NA, padj = NA, cex = 1.4, col = NA, font = NA)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))),
col = 4)
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
plot(summary(b)$RSS[2,], x=0:6,type="b", main="", xlab=bxlab[i],
ylab=bylab[i], bty="L", lty=1)
}
##########END BREAKPOINT
fitted(b, breaks = sum(!is.na(b$breakpoints)))
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))),
col = 4)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))), y=10
col = 4)
##########BREAKPOINT
par(cex.axis=1, cex.lab=1.75, cex.main=1.2, cex.sub=1)
par(mfrow=c(3,2), mar= c(5, 5., 1.5, 1.1), oma=c(1,1,1,1))
site=c("B", "HB", "C")
bxlab=c("","", "Breaks")
bylab=c("","BIC", "")
ly=expression(paste("Light Attentuated (", m^-1, ")"))
lylab=c("", ly, "")
site[i]
for(i in 1:3){
dat=ts(spydat$metric[spydat$Station_Acronym==site[i]], start=spydat$year[1],
end=spydat$year[length(spydat$year)])
tt=1:length(dat)
b=breakpoints(dat~1)
print(b)
f=Fstats(dat~1)
bl=summary(lm(dat~1))
print(bl)
plot(dat, type="b", pch=16, xlab="",
ylab="",
ylim=c(0,50),
main=paste("                                                                                   Site ",
site[i]) ,
bty="L", lty=1)
#abline(v=summary(b)$breakdates[b,], col="red")
# text(breakdates(b)+3,max(dat)-0.05*max(dat), breakdates(b))
text(breakdates(b)+3,1.8, breakdates(b))
mtext(lylab[i], side = 2, line = -2, outer = TRUE, at = NA,
adj = NA, padj = NA, cex = 1.4, col = NA, font = NA)
lines(fitted(b, breaks = sum(!is.na(b$breakpoints))), y=10,
col = 4)
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
plot(summary(b)$RSS[2,], x=0:6,type="b", main="", xlab=bxlab[i],
ylab=bylab[i], bty="L", lty=1)
}
##########END BREAKPOINT
if (sum(!is.na(b$breakpoints))>0) {
lines(confint(b, breaks = sum(!is.na(b$breakpoints))), col=2)
}
confint(b, breaks = sum(!is.na(b$breakpoints)))
#install.packages("readxl")
rm(list=ls())
#library("readxl")
#install.packages("mgcv")
#this package fits a GAM
library("mgcv")
#install.packages("devtools")
#library("devtools")
#devtools::install_github("gavinsimpson/gratia")
#this package calculates the finite difference of a GAM curve
library("gratia")
#read in data supplied by DFO, rename and aggregate into annuual means
my_data <-(read_excel("E:/homeoffice/kim/transients/quinte data/QUINTE.xlsx", sheet = 1))
library(openxlsx)
#my_data <-(as.data.frame(read.xlsx("E:/homeoffice/kim/transients/quinte data/QUINTE.xlsx")))
#rename col in original file
#colnames(my_data)[colnames(my_data)=="Epar#Ship"] <- "epar"
#colnames(my_data)[colnames(my_data)=="Secchi_depth#Ship"] <- "secchi"
#colnames(my_data)[colnames(my_data)=="Chl_a_uncorrected#GLLFAS"] <- "Chla"
#colnames(my_data)[colnames(my_data)=="TOTAL_Daphnia_BM"]<-"daphnia"
#colnames(my_data)[colnames(my_data)=="Total Phyto biomass searching Excel files"]<-"Phyto_BM"
my_data <-(as.data.frame(read.csv("E:/homeoffice/kim/Quinte/Quinte2022.csv")))
#rename col in recent file
colnames(my_data)[1]<-"Station_Acronym"
colnames(my_data)[colnames(my_data)=="Kd"] <- "epar"
colnames(my_data)[colnames(my_data)=="Secchi"] <- "secchi"
colnames(my_data)[colnames(my_data)=="chl"] <- "Chla"
colnames(my_data)[colnames(my_data)=="TotalPhyto"]<-"Phyto_BM"
mmetric="Chla" #select which metric to analyze
mlab=expression(Light~attenuation~(m^-1))
#mlab=expression(Chlorophyll~a~(mu~g~L^-1))
#mlab=expression(Total~phosophorus~(mg~L^-1))
#rlab=expression(Rate~of~change~(mg~L^-1~year^-1))
rlab=expression(Rate~of~change~(m^-1~year^-1))
#rlab=expression(Rate~of~change~(mu~g~L^-1~year^-1))
sscal=0.0001 #phosophorus and round 3
sscal=1.25 #clorophyll and round 1
#sscal=0.005 #phosophorus and round 3
#aggregate and run analysis on selected sites
frm=paste(mmetric,"~ Station_Acronym+year")
spydat=aggregate(as.formula(frm), my_data, length)
mdat=aggregate(as.formula(frm), my_data, mean)
colnames(spydat)[3]="n"
spydat[4]=mdat[3]
colnames(spydat)[4]="metric"
spydat$weights <- spydat$n/mean(spydat$n)
tdat=aggregate(TP~ Station_Acronym+year, my_data, length)
mdat=aggregate(as.formula(frm), my_data, FUN=mean, na.rm=TRUE, na.action="na.pass")
tdat
agg <- aggregate(list(metric=my_data[mmetric],TP=my_data$TP),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=mean, na.rm=TRUE, na.action="na.pass")
agg2 <- aggregate(list(metricN=my_data[mmetric]),
by = list(Station_Acronym=my_data$Station_Acronym, year=my_data$year),
FUN=length)
agg$n=agg2[,3]
agg$weights <- agg$n/mean(agg$n)
colnames(agg)[3]="metric"
#select sites on which to run analysis
stvec=c("B", "HB",  "C")
stlabel=c("Belleville", "Hay Bay", "Conway")
xyear=c(1972,2015)
par(mfrow=c(3,2), mar=c(0,4,0,3), oma=c(5,5,2,2),cex.axis=1.25)
spydat=agg[agg$Station_Acronym%in%stvec,]
#doing this analysis for each site
if (stvec[i]=="C" & mmetric=="TP") pdat=pdat[-nrow(pdat),]
pdat=pdat[pdat$year%in%c(1972:2015),]
xyear=c(1972,2015)
str(pdat)
N=1000 #number of points at which to evaluate the smooth
pdat=spydat
pdat$Station_Acronym=as.factor(pdat$Station_Acronym)
pdat$metric=oufit
form1="metric ~  te(TP,year, bs='tp')"
form2="metric ~  te(TP,year, bs='tp', m=2)+t2(TP,year,Station_Acronym, bs=c('tp','tp','re'), m=2, full=TRUE)"  #gs
form3="metric ~  Station_Acronym+te(TP,year, bs='tp', m=2)+te(TP,year,by=Station_Acronym, bs='tp', m=1)" #gi
form4="metric ~  t2(TP,year,Station_Acronym, bs=c('tp','tp','re'), m=2, full=TRUE)" #s
form5="metric ~  Station_Acronym+te(TP,year,by=Station_Acronym, bs=c('tp', 'tp'), m=2)" #i
form6="metric ~  Station_Acronym+s(TP,bs='tp',k=20,m=2)+te(TP,year,by=Station_Acronym, bs='tp',  m=1)"
form7="metric ~  Station_Acronym+s(TP,bs='tp',k=20,m=2)+s(year,by=Station_Acronym, bs='tp', k=20,m=1)"
form8="metric ~  Station_Acronym+s(TP,bs='tp',k=9,m=2)"
frmvec=c(form1, form2,form3, form4, form5, form6, form7, form8)
rm(mm)
mm=list()
sc=vector()
for (fr in 1:length(frmvec)){
m<- gam(as.formula(frmvec[fr]) ,
data = pdat, weights=weights,
na.action=na.omit,
niterPQL=100,
#correlation=corAR1(form = ~ year|Station_Acronym),
method = "REML")
sc[fr]=AIC(m)
}
ind=which.min(sc)
fm<- gam(as.formula(frmvec[7]) ,
data = pdat, weights=weights,
na.action=na.omit,
niterPQL=100,
#correlation=corAR1(form = ~ year|Station_Acronym),
method = "REML")
fm
newYear<-with(pdat,expand.grid(
year = seq(from=min(year, na.rm=TRUE),to=max(year, na.rm=TRUE),
length.out = 20000),
#   TP = seq(from=min(TP, na.rm=TRUE), to=max(TP, na.rm=TRUE), length.out=20),
Station_Acronym = c("B","HB", "C")))
newYear$TP=mean(pdat$TP)
TPvals=aggregate(pdat$TP, list(pdat$Station_Acronym), function(x) mean(x, na.rm=T))
newYear$TP=ifelse (newYear$Station_Acronym=="B", TPvals[1,2], newYear$TP)
newYear$TP=ifelse (newYear$Station_Acronym=="HB", TPvals[3,2], newYear$TP)
newYear$TP=ifelse (newYear$Station_Acronym=="C", TPvals[2,2], newYear$TP)
#TPvals=summary(fm)$p.coeff
#newYear$TP=mean(pdat$TP, na.rm=T)
#newYear$TP=ifelse (newYear$Station_Acronym=="B", TPvals[1], newYear$TP)
#newYear$TP=ifelse (newYear$Station_Acronym=="HB", TPvals[1]+TPvals[3], newYear$TP)
#newYear$TP=ifelse (newYear$Station_Acronym=="C", TPvals[1]+TPvals[2], newYear$TP)
## Predict from the fitted model; note we predict from the $gam part
#newYear <- cbind(newYear, data.frame(predict(fm, newYear, include="s(TP)",
newYear <- cbind(newYear, data.frame(predict(fm, newYear, exclude="s(TP)",
se.fit = TRUE, newdata.guaranteed=TRUE)))
#newYear <- cbind(pdat, data.frame(predict(fm, pdat, se.fit = TRUE)))
## Create the confidence interval
crit.t <- qt(0.975, df = df.residual(fm))
newYear <- transform(newYear,
upper = fit + (crit.t * se.fit), lower = fit - (crit.t * se.fit))
mscale=c(min(newYear$lower, na.rm=TRUE)-sscal,
max(pdat$metric, na.rm=T)+sscal)
ad=as.data.frame(derivatives(fm, term="s(year):Station_AcronymC"), interval="simultaneous")
plot(x=ad[,3], y=ad[,4])
lines(x=ad$data, y=ad$upper, lty=2)
lines(x=ad$data, y=ad$lower, lty=2)
abline(h=0)
abline(v=1994)
for (i in 1:3){
datpl=newYear[newYear$Station_Acronym==stvec[i],]
datre=pdat[pdat$Station_Acronym==stvec[i],]
plot(metric~year, xaxt="n",pch=16, data=datre,
ann=FALSE, xlim=xyear,ylim=mscale, las=2)
lines(datpl$fit~datpl$year, lwd=2,col=i)
lines(upper~year, data=datpl,col="purple")
lines(lower~year, data=datpl,col="purple")
x=c(rev(datpl$lower), datpl$upper)
y=c(rev(datpl$year), datpl$year)
polygon(y,x, col=adjustcolor("grey",alpha.f=0.1), border=NA )
}
summary(fm)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("C:/github/module-5-optimization")
setwd("C:/github/Basics")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
